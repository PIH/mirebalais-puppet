#!/bin/sh
#
# Script to take a DB dump on the production server (ignoring reporting and some other tables) and copy it to the reporting server
#

USER='<%= @backup_db_user %>'
PASS='<%= @backup_db_password %>'
DIR=/home/<%= @tomcat %>/backups

LOCAL_REPORTING_SERVER='backups@192.168.1.217:/home/backups'
REMOTE_REPORTING_SERVER='mirebalaisreporting@data.pih-emr.org:/home/mirebalaisreporting'

ENCRYPT_PASSWORD=${PASS}

FILENAME='mirebalais_nightly_reporting_dump.sql.7z'

# create the needed directories
mkdir -p ${DIR}/reporting

# Dump, encrypt, and compress backup for reporting
mysqldump -u${USER} -p${PASS} --opt --flush-logs --single-transaction --ignore-table=openmrs.pacsintegration_inbound_queue \
	--ignore-table=openmrs.pacsintegration_outbound_queue --ignore-table=openmrs.reporting_idset --ignore-table=openmrs.reporting_report_design \
	--ignore-table=openmrs.reporting_report_design_resource --ignore-table=openmrs.reporting_report_processor \
	--ignore-table=openmrs.reporting_report_request --ignore-table=openmrs.scheduler_task_config \
	--ignore-table=openmrs.scheduler_task_config_property --ignore-table=openmrs.serialized_object openmrs 2>/dev/null | 7za a -p${ENCRYPT_PASSWORD} -siy ${DIR}/reporting/${FILENAME} -mx9 2>&1 >/dev/null

if ! [ -s "${DIR}/reporting/${FILENAME}" ]
then
	>&2 echo "Reporting DB dump file empty\n" 
fi


#scp (note that public/private key sharing needs to be set up manually between production and reporting, this is not handled via puppet)
scp ${DIR}/reporting/${FILENAME} ${LOCAL_REPORTING_SERVER}/${FILENAME}
scp ${DIR}/reporting/${FILENAME} ${REMOTE_REPORTING_SERVER}/${FILENAME}
rm ${DIR}/reporting/${FILENAME}
